// Define the data source configuration for connecting to the PostgreSQL database
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Fetch database URL from environment variable
}

// Define the Prisma client generator configuration
generator client {
  provider = "prisma-client-js" // Generate Prisma Client JavaScript code
}

// Define an enum for representing different HD status options
enum HdStatus {
  NO
  PENDING
  PROCESSED
}

// Define the model for representing user accounts
model Account {
  id                String   @id @default(cuid()) // Unique identifier for the account
  userId            String   @map("user_id") // User ID associated with the account
  type              String   // Type of the account
  provider          String   // Provider of the account
  providerAccountId String   @map("provider_account_id") // Provider-specific account ID
  refresh_token     String?  @db.Text // Refresh token for the account
  access_token      String?  @db.Text // Access token for the account
  expires_at        Int?     // Expiry timestamp for the tokens
  token_type        String?  // Type of token
  scope             String?  // Scope of access
  id_token          String?  @db.Text // ID token associated with the account
  session_state     String?  // State of the session

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Define a relation to the user model

  @@unique([provider, providerAccountId]) // Ensure uniqueness of combination
  @@map("accounts") // Map this model to the "accounts" table in the database
}

// Define the model for representing user sessions
model Session {
  id           String   @id @default(cuid()) // Unique identifier for the session
  sessionToken String   @unique @map("session_token") // Unique session token
  userId       String   @map("user_id") // User ID associated with the session
  expires      DateTime // Expiry date and time of the session
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Define a relation to the user model

  @@map("sessions") // Map this model to the "sessions" table in the database
}

// Define the model for representing users
model User {
  id            String    @id @default(cuid()) // Unique identifier for the user
  name          String?   // User's name
  email         String?   @unique // User's email address (unique)
  emailVerified DateTime? @map("email_verified") // Date and time when email was verified
  image         String?   // URL of user's profile image
  accounts      Account[] // List of accounts associated with the user
  sessions      Session[] // List of sessions associated with the user
  projects      Project[] // List of projects created by the user

  @@map("users") // Map this model to the "users" table in the database
}

// Define the model for representing verification tokens
model VerificationToken {
  identifier String  // Identifier associated with the token
  token      String  @unique // Unique verification token
  expires    DateTime // Expiry date and time of the token

  @@unique([identifier, token]) // Ensure uniqueness of combination
  @@map("verification_tokens") // Map this model to the "verification_tokens" table in the database
}

// Define the model for representing projects
model Project {
  id                  String    @id @default(cuid()) // Unique identifier for the project
  name                String    // Name of the project
  replicateModelId    String?   // ID of the replicated model
  stripePaymentId     String?   // ID of the Stripe payment
  modelVersionId      String?   // ID of the model version
  modelStatus         String?   // Status of the model
  instanceName        String    // Name of the instance
  instanceClass       String    // Class of the instance
  imageUrls           String[]  // URLs of images associated with the project
  zipImageUrl         String?   // URL of the zipped image
  createdAt           DateTime  @default(now()) // Date and time when the project was created
  updatedAt           DateTime  @updatedAt // Date and time when the project was last updated
  User                User?     @relation(fields: [userId], references: [id]) // Define a relation to the user model
  userId              String?   // User ID associated with the project
  shots               Shot[]    // List of shots associated with the project
  credits             Int       @default(100) // Number of credits for the project
  promptWizardCredits Int       @default(20) // Number of credits for the prompt wizard
  Payment             Payment[] // List of payments associated with the project

  @@map("projects") // Map this model to the "projects" table in the database
}

// Define the model for representing shots
model Shot {
  id          String   @id @default(cuid()) // Unique identifier for the shot
  prompt      String   // Prompt for the shot
  replicateId String   // ID of the replicated shot
  status      String   // Status of the shot
  createdAt   DateTime @default(now()) // Date and time when the shot was created
  updatedAt   DateTime @updatedAt // Date and time when the shot was last updated
  Project     Project? @relation(fields: [projectId], references: [id]) // Define a relation to the project model
  projectId   String?  // Project ID associated with the shot
  outputUrl   String?  // URL of the shot's output
  bookmarked  Boolean? @default(false) // Indicates if the shot is bookmarked
  blurhash    String?  // Blurhash for the shot
  seed        Int?     // Seed for the shot
  hdStatus    HdStatus @default(NO) // HD status of the shot
  hdPredictionId String? // ID of the HD prediction associated with the shot
  hdOutputUrl String? // URL of the HD output associated with the shot

  @@map("shots") // Map this model to the "shots" table in the database
}

// Define the model for representing payments
model Payment {
  id             String   @id @default(cuid()) // Unique identifier for the payment
  type           String   // Type of the payment
  status         String   // Status of the payment
  stripeSessionId String   // ID of the Stripe session
  createdAt      DateTime @default(now()) // Date and time when the payment was created
  Project        Project? @relation(fields: [projectId], references: [id]) // Define a relation to the project model
  projectId      String?  // Project ID associated with the payment

  @@map("payments") // Map this model to the "payments" table in the database
}
